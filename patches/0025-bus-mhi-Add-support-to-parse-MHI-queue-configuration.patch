From 2e44252beb0ef4320a0f447a7a7ad25cbecea94a Mon Sep 17 00:00:00 2001
From: Vivek Pernamitta <quic_vpernami@quicinc.com>
Date: Fri, 3 May 2024 15:05:43 +0530
Subject: [PATCH 25/26] bus : mhi: Add support to parse MHI queue configuration
 per MHI channel

Add support to parse MHI queue configuration in mhi_chan
from mhi_channel_config.
Each client which supports to bind multiple channels in
to single device needs to be declared by setting
queue property and update max_ul_chan/max_dl_chan.

MHI driver while creating device will all parse channels
and map the respective TX and RX channel of same channel
name to mhi_device.ul_chan/mhi_device.dl_chan array.

Print channel info if respective channel supports queue
(binds multiple channels in to single mhi device) in debug FS.

Change-Id: I20432ee8ebca7741c4e63d4de6f72933758c2a57
Signed-off-by: Vivek Pernamitta <quic_vpernami@quicinc.com>
---
 drivers/bus/mhi/host/debugfs.c | 7 ++++++-
 drivers/bus/mhi/host/init.c    | 6 ++++++
 include/linux/mhi.h            | 6 ++++++
 3 files changed, 18 insertions(+), 1 deletion(-)

diff --git a/drivers/bus/mhi/host/debugfs.c b/drivers/bus/mhi/host/debugfs.c
index c1fb5acd7015..ab8d9d668bba 100644
--- a/drivers/bus/mhi/host/debugfs.c
+++ b/drivers/bus/mhi/host/debugfs.c
@@ -119,9 +119,14 @@ static int mhi_debugfs_channels_show(struct seq_file *m, void *d)
 			   le64_to_cpu(chan_ctxt->rbase), le64_to_cpu(chan_ctxt->rlen),
 			   le64_to_cpu(chan_ctxt->rp), le64_to_cpu(chan_ctxt->wp));
 
-		seq_printf(m, " local rp: 0x%pK local wp: 0x%pK db: 0x%pad\n",
+		seq_printf(m, " local rp: 0x%pK local wp: 0x%pK db: 0x%pad",
 			   ring->rp, ring->wp,
 			   &mhi_chan->db_cfg.db_val);
+
+		if (mhi_chan->queue)
+			seq_printf(m, " queue\n");
+		else
+			seq_printf(m ,"\n");
 	}
 
 	return 0;
diff --git a/drivers/bus/mhi/host/init.c b/drivers/bus/mhi/host/init.c
index f99f7a7a215c..bd9efd715ad8 100644
--- a/drivers/bus/mhi/host/init.c
+++ b/drivers/bus/mhi/host/init.c
@@ -844,6 +844,12 @@ static int parse_ch_cfg(struct mhi_controller *mhi_cntrl,
 		mhi_chan->pre_alloc = ch_cfg->auto_queue;
 		mhi_chan->wake_capable = ch_cfg->wake_capable;
 
+		mhi_chan->queue = ch_cfg->queue;
+		if (mhi_chan->queue) {
+		mhi_chan->num_ul_chan = ch_cfg->max_ul_chan;
+			mhi_chan->num_dl_chan = ch_cfg->max_dl_chan;
+		}
+
 		/*
 		 * If MHI host allocates buffers, then the channel direction
 		 * should be DMA_FROM_DEVICE
diff --git a/include/linux/mhi.h b/include/linux/mhi.h
index 50d38c8cb206..4f7cf38aecfe 100644
--- a/include/linux/mhi.h
+++ b/include/linux/mhi.h
@@ -217,6 +217,9 @@ enum mhi_db_brst_mode {
  * @doorbell_mode_switch: Channel switches to doorbell mode on M0 transition
  * @auto_queue: Framework will automatically queue buffers for DL traffic
  * @wake-capable: Channel capable of waking up the system
+ * @queue: mutliple channels needs to bind to sigle mhi_device
+ * @max_ul_chan: Maximum UL channel in the mhi device
+ * @max_dl_chan: Maximum DL channel in the mhi device
  */
 struct mhi_channel_config {
 	char *name;
@@ -234,6 +237,9 @@ struct mhi_channel_config {
 	bool doorbell_mode_switch;
 	bool auto_queue;
 	bool wake_capable;
+	bool queue;
+	u32 max_ul_chan;
+	u32 max_dl_chan;
 };
 
 /**
-- 
2.45.2

